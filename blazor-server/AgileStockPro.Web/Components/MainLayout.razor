@inherits LayoutComponentBase

<PageTitle>AgileStockPro</PageTitle>

@using Microsoft.FluentUI.AspNetCore.Components

@inject AgileStockPro.Web.Services.IAuthService Auth
@inject AgileStockPro.Web.Services.Api.ITokenProvider Tokens
@inject IToastService Toast

<div class="layout-root">
    <header class="site-header">
        <button class="btn" title="Contraer/Expandir menú" @onclick="ToggleSidebar">≡</button>
        <div class="brand">AgileStockPro</div>
        <input class="search" placeholder="Buscar..." />
        <div style="margin-left:auto; display:flex; gap:.5rem; align-items:center;">
            @if (currentUser is not null)
            {
                <span class="muted">@currentUser.Username (@(currentUser.IsAdmin ? "Admin" : "Usuario"))</span>
                <a class="btn" href="/change-password">Cambiar contraseña</a>
                <button class="btn" @onclick="Logout">Salir</button>
            }
            else
            {
                <a class="btn" href="/login">Ingresar</a>
            }
        </div>
    </header>
    <div class="layout-body @(collapsed ? "collapsed" : null)">
        <AgileStockPro.Web.Components.NavMenu Collapsed="collapsed" User="currentUser" />
        <main class="content">
            <CascadingValue Value="Toast">
                @Body
            </CascadingValue>
        </main>
    </div>
        <FluentToastProvider />
        <FluentDialogProvider />
        <FluentTooltipProvider />
        <FluentMessageBarProvider />
        <FluentMenuProvider />
</div>

@code {
    private bool collapsed;
    private AgileStockPro.Web.Models.AppUser? currentUser;
    private System.Timers.Timer? _logoutTimer;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await Auth.GetCurrentUserAsync();
        SetupAutoLogout();
    }

    private void ToggleSidebar() => collapsed = !collapsed;
    private async Task Logout()
    {
        await Auth.LogoutAsync();
        currentUser = null;
        Toast.ShowInfo("Sesión cerrada");
        StateHasChanged();
    }

    private void SetupAutoLogout()
    {
        try
        {
            _logoutTimer?.Stop();
            _logoutTimer?.Dispose();
            var token = Tokens.Token;
            if (string.IsNullOrWhiteSpace(token)) return;
            var exp = GetJwtExpiryUtc(token);
            if (exp == null) return;
            var now = DateTimeOffset.UtcNow;
            var ms = (exp.Value - now).TotalMilliseconds;
            if (ms <= 0) { _ = Logout(); return; }
            _logoutTimer = new System.Timers.Timer(ms);
            _logoutTimer.AutoReset = false;
            _logoutTimer.Elapsed += async (_, __) => { await Logout(); };
            _logoutTimer.Start();
        }
        catch { }
    }

    private static DateTimeOffset? GetJwtExpiryUtc(string jwt)
    {
        try
        {
            var parts = jwt.Split('.');
            if (parts.Length < 2) return null;
            var payload = parts[1];
            payload = PadBase64(payload);
            var json = System.Text.Json.JsonDocument.Parse(Convert.FromBase64String(payload));
            if (json.RootElement.TryGetProperty("exp", out var exp) && exp.TryGetInt64(out var seconds))
            {
                return DateTimeOffset.FromUnixTimeSeconds(seconds);
            }
        }
        catch { }
        return null;
    }

    private static string PadBase64(string s)
    {
        s = s.Replace('-', '+').Replace('_', '/');
        return s.PadRight(s.Length + (4 - s.Length % 4) % 4, '=');
    }
}
