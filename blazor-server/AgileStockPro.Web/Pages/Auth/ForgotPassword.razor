@page "/forgot-password"
@inject AgileStockPro.Web.Services.IAuthService Auth
@inject IToastService Toast

<PageHeader Title="Recuperar contraseña" />

<div class="panel">
    <div class="panel-header">Identificación</div>
    <div style="display:flex; gap:.5rem; align-items:center;">
    <input class="input" placeholder="Usuario" @bind-value="username" />
    <button class="btn" disabled="@busy" @onclick="LoadQuestions">@(busy?"Cargando…":"Continuar")</button>
    </div>
</div>

@if (questions?.Any() == true)
{
    <div class="panel">
        <div class="panel-header">Preguntas de seguridad</div>
        @foreach (var q in questions!)
        {
            <div style="margin:.5rem 0;">
                <div style="margin-bottom:.25rem; font-weight:600">@q</div>
                <input class="input" @bind-value="answers[q]" />
            </div>
        }
    <button class="btn btn-primary" disabled="@busy" @onclick="Reset">@(busy?"Procesando…":"Generar nueva contraseña")</button>
        @if (!string.IsNullOrWhiteSpace(info))
        {
            <div class="muted" style="margin-top:.5rem">@info</div>
        }
        @if (!string.IsNullOrWhiteSpace(error))
        {
            <div class="error" style="margin-top:.5rem">@error</div>
        }
    </div>
}

@code {
    private string username = string.Empty;
    private List<string>? questions;
    private Dictionary<string, string> answers = new();
    private string? error;
    private string? info;
    private bool busy;

    private async Task LoadQuestions()
    {
        error = info = null; busy = true;
        try
        {
            var qs = await Auth.GetSecurityQuestionsAsync(username);
            if (qs == null || qs.Count == 0)
            {
                error = "Usuario no encontrado";
                questions = null;
                Toast.ShowError(error);
                return;
            }
            questions = qs.ToList();
            answers = questions.ToDictionary(q => q, _ => string.Empty);
        }
        catch (Exception ex)
        {
            error = ex.Message;
            Toast.ShowError(error);
        }
        finally { busy = false; }
    }

    private async Task Reset()
    {
        error = info = null; busy = true;
        if (string.IsNullOrWhiteSpace(username) || questions == null)
        {
            error = "Complete los datos";
            Toast.ShowError(error);
            busy = false;
            return;
        }
        var result = await Auth.ResetPasswordAsync(username, answers);
        if (!result.Success)
        {
            error = result.Error ?? "No se pudo resetear";
            Toast.ShowError(error);
            busy = false;
            return;
        }
        // Simulación de envío por email: mostramos la contraseña temporal
        info = $"Contraseña temporal: {result.TempPassword}. Deberá cambiarla al ingresar.";
        Toast.ShowSuccess("Se envió una contraseña temporal al correo (demo)");
        busy = false;
    }
}
