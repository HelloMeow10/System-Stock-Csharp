@page "/forgot-password"
@inject AgileStockPro.Web.Services.IUserStore Store
@inject AgileStockPro.Web.Services.IAuthService Auth

<PageHeader Title="Recuperar contraseña" />

<div class="panel">
    <div class="panel-header">Identificación</div>
    <div style="display:flex; gap:.5rem; align-items:center;">
        <input class="input" placeholder="Usuario" @bind-value="username" />
        <button class="btn" @onclick="LoadQuestions">Continuar</button>
    </div>
</div>

@if (questions?.Any() == true)
{
    <div class="panel">
        <div class="panel-header">Preguntas de seguridad</div>
        @foreach (var q in questions!)
        {
            <div style="margin:.5rem 0;">
                <div style="margin-bottom:.25rem; font-weight:600">@q</div>
                <input class="input" @bind-value="answers[q]" />
            </div>
        }
        <button class="btn btn-primary" @onclick="Reset">Generar nueva contraseña</button>
        @if (!string.IsNullOrWhiteSpace(info))
        {
            <div class="muted" style="margin-top:.5rem">@info</div>
        }
        @if (!string.IsNullOrWhiteSpace(error))
        {
            <div class="error" style="margin-top:.5rem">@error</div>
        }
    </div>
}

@code {
    private string username = string.Empty;
    private List<string>? questions;
    private Dictionary<string, string> answers = new();
    private string? error;
    private string? info;

    private async Task LoadQuestions()
    {
        error = info = null;
        var user = await Store.FindByUsernameAsync(username);
        if (user == null)
        {
            error = "Usuario no encontrado";
            questions = null;
            return;
        }
        questions = user.SecurityQuestions.Select(q => q.Question).ToList();
        answers = questions.ToDictionary(q => q, _ => string.Empty);
    }

    private async Task Reset()
    {
        error = info = null;
        if (string.IsNullOrWhiteSpace(username) || questions == null)
        {
            error = "Complete los datos";
            return;
        }
        var result = await Auth.ResetPasswordAsync(username, answers);
        if (!result.Success)
        {
            error = result.Error ?? "No se pudo resetear";
            return;
        }
        // Simulación de envío por email: mostramos la contraseña temporal
        info = $"Contraseña temporal: {result.TempPassword}. Deberá cambiarla al ingresar.";
    }
}
