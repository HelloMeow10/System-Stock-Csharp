@page "/products"
@inject AgileStockPro.Web.Services.IProductService ProductService
@inject Microsoft.JSInterop.IJSRuntime JS

<PageHeader Title="Productos">
    <Actions>
        <button class="btn btn-primary">Nuevo</button>
        <button class="btn" @onclick="ExportCsv" disabled="@(TotalCount == 0)">Exportar CSV</button>
    </Actions>
</PageHeader>

@if (products is null)
{
    <p>Cargando...</p>
}
else
{
    <section style="margin-top:1rem">
        <div class="toolbar" style="display:flex; flex-wrap:wrap; gap:.5rem; justify-content:flex-start; align-items:center; margin-bottom:.75rem;">
            <input class="search" placeholder="Buscar por nombre o categoría..." @bind-value="search" @bind-value:event="oninput" />
            <select class="select" style="min-width:180px" @bind="selectedCategory">
                <option value="">Todas las categorías</option>
                @foreach (var c in Categories)
                {
                    <option value="@c">@c</option>
                }
            </select>
            <div style="margin-left:auto; display:flex; gap:.5rem; align-items:center;">
                <label style="opacity:.8;">Tamaño página</label>
                <select class="select" style="width:100px" @bind="pageSize">
                    <option value="10">10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </div>
        </div>
        <table>
            <thead>
                <tr>
                    <th>
                        Id
                    </th>
                    <th>
                        <button class="th-btn" @onclick="() => ToggleSort(nameof(AgileStockPro.Web.Models.Product.Name))">Nombre @SortGlyph(nameof(AgileStockPro.Web.Models.Product.Name))</button>
                    </th>
                    <th>
                        <button class="th-btn" @onclick="() => ToggleSort(nameof(AgileStockPro.Web.Models.Product.Category))">Categoría @SortGlyph(nameof(AgileStockPro.Web.Models.Product.Category))</button>
                    </th>
                    <th>Marca</th>
                    <th>
                        <button class="th-btn" @onclick="() => ToggleSort(nameof(AgileStockPro.Web.Models.Product.Stock))">Stock @SortGlyph(nameof(AgileStockPro.Web.Models.Product.Stock))</button>
                    </th>
                    <th>Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in PagedView)
                {
                    <tr>
                        <td>@p.Id</td>
                        <td>@p.Name</td>
                        <td>@p.Category</td>
                        <td>@p.Brand</td>
                        <td>@p.Stock</td>
                        <td><AgileStockPro.Web.Components.StatusBadge Status="@p.Status" /></td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="pager" style="display:flex; align-items:center; gap:.75rem; justify-content:space-between; margin-top:.75rem;">
            <div style="opacity:.8;">Mostrando @StartItem–@EndItem de @TotalCount</div>
            <div style="display:flex; align-items:center; gap:.5rem;">
                <button class="btn" @onclick="PrevPage" disabled="@(pageIndex <= 1)">Anterior</button>
                <span style="min-width:110px; text-align:center">Página @pageIndex de @PageCount</span>
                <button class="btn" @onclick="NextPage" disabled="@(pageIndex >= PageCount)">Siguiente</button>
            </div>
        </div>
    </section>
}

@code {
    IEnumerable<AgileStockPro.Web.Models.Product>? products;
    string _search = string.Empty;
    string search
    {
        get => _search;
        set
        {
            if (_search != value)
            {
                _search = value;
                pageIndex = 1;
            }
        }
    }
    string? _selectedCategory;
    string? selectedCategory
    {
        get => _selectedCategory;
        set
        {
            if (_selectedCategory != value)
            {
                _selectedCategory = value;
                pageIndex = 1;
            }
        }
    }
    string? sortBy;
    bool sortDesc;
    int pageIndex = 1;
    int _pageSize = 10;
    int pageSize
    {
        get => _pageSize;
        set
        {
            var v = value <= 0 ? 10 : value;
            if (_pageSize != v)
            {
                _pageSize = v;
                pageIndex = 1;
            }
        }
    }

    IEnumerable<AgileStockPro.Web.Models.Product> BaseView => ApplyFilter(ApplySearch(products ?? Enumerable.Empty<AgileStockPro.Web.Models.Product>()));
    IEnumerable<AgileStockPro.Web.Models.Product> SortedView => ApplySort(BaseView);
    IEnumerable<AgileStockPro.Web.Models.Product> PagedView => SortedView.Skip((pageIndex - 1) * pageSize).Take(pageSize);
    int TotalCount => SortedView.Count();
    int PageCount => Math.Max(1, (int)Math.Ceiling(TotalCount / (double)pageSize));
    int StartItem => TotalCount == 0 ? 0 : ((pageIndex - 1) * pageSize) + 1;
    int EndItem => Math.Min(pageIndex * pageSize, TotalCount);
    IEnumerable<string> Categories => products?.Select(p => p.Category).Where(c => !string.IsNullOrWhiteSpace(c)).Distinct().OrderBy(c => c) ?? Enumerable.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProductsAsync();
    }

    IEnumerable<AgileStockPro.Web.Models.Product> ApplySearch(IEnumerable<AgileStockPro.Web.Models.Product> source)
    {
        if (string.IsNullOrWhiteSpace(search)) return source;
        var term = search.Trim().ToLowerInvariant();
        return source.Where(p => (p.Name?.ToLowerInvariant().Contains(term) ?? false)
                              || (p.Category?.ToLowerInvariant().Contains(term) ?? false));
    }

    IEnumerable<AgileStockPro.Web.Models.Product> ApplyFilter(IEnumerable<AgileStockPro.Web.Models.Product> source)
    {
        if (string.IsNullOrWhiteSpace(selectedCategory)) return source;
        return source.Where(p => string.Equals(p.Category, selectedCategory, StringComparison.OrdinalIgnoreCase));
    }

    IEnumerable<AgileStockPro.Web.Models.Product> ApplySort(IEnumerable<AgileStockPro.Web.Models.Product> source)
    {
        return (sortBy, sortDesc) switch
        {
            (nameof(AgileStockPro.Web.Models.Product.Name), false) => source.OrderBy(p => p.Name),
            (nameof(AgileStockPro.Web.Models.Product.Name), true) => source.OrderByDescending(p => p.Name),
            (nameof(AgileStockPro.Web.Models.Product.Category), false) => source.OrderBy(p => p.Category),
            (nameof(AgileStockPro.Web.Models.Product.Category), true) => source.OrderByDescending(p => p.Category),
            (nameof(AgileStockPro.Web.Models.Product.Stock), false) => source.OrderBy(p => p.Stock),
            (nameof(AgileStockPro.Web.Models.Product.Stock), true) => source.OrderByDescending(p => p.Stock),
            _ => source
        };
    }

    void ToggleSort(string column)
    {
        if (sortBy == column)
        {
            sortDesc = !sortDesc;
        }
        else
        {
            sortBy = column;
            sortDesc = false;
        }
    }

    MarkupString SortGlyph(string column)
    {
        if (sortBy != column) return (MarkupString)"";
        return sortDesc ? (MarkupString)"&nbsp;▼" : (MarkupString)"&nbsp;▲";
    }

    void PrevPage()
    {
        if (pageIndex > 1) pageIndex--;
    }

    void NextPage()
    {
        if (pageIndex < PageCount) pageIndex++;
    }

    async Task ExportCsv()
    {
        var rows = SortedView; // export filtered + sorted (todas las páginas)
        var sb = new System.Text.StringBuilder();
        void Add(string s)
        {
            if (s is null) s = string.Empty;
            var needsQuotes = s.Contains('"') || s.Contains(',') || s.Contains('\n') || s.Contains('\r');
            s = s.Replace("\"", "\"\"");
            if (needsQuotes) s = $"\"{s}\"";
            sb.Append(s);
        }
        // header
        sb.AppendLine("Id,Nombre,Categoría,Marca,Stock,Estado");
        foreach (var p in rows)
        {
            Add(p.Id.ToString()); sb.Append(',');
            Add(p.Name ?? ""); sb.Append(',');
            Add(p.Category ?? ""); sb.Append(',');
            Add(p.Brand ?? ""); sb.Append(',');
            Add(p.Stock.ToString()); sb.Append(',');
            Add(p.Status?.ToString() ?? ""); sb.AppendLine();
        }
        var csv = sb.ToString();
        await JS.InvokeVoidAsync("app.downloadFile", "productos.csv", csv, "text/csv;charset=utf-8");
    }
}
