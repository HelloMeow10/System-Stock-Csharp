@page "/personas"
@using AgileStockPro.Web.Services.Api
@using Microsoft.AspNetCore.Components.Forms
@inject BackendApiClient Api
@inject IToastService Toast
@inject Microsoft.JSInterop.IJSRuntime JS

<PageHeader Title="Personas">
    <Actions>
        <input class="input" placeholder="Nombre" @bind="nombreFilter" style="min-width:160px" />
        <input class="input" placeholder="N° Doc" @bind="docFilter" style="min-width:120px" />
        <select class="input" @bind="provinciaFilterId">
            <option value="0">Provincia</option>
            @foreach (var pr in provincias)
            {
                <option value="@pr.IdProvincia">@pr.Nombre</option>
            }
        </select>
        <button class="btn" disabled="@busy" @onclick="Buscar">Buscar</button>
        <button class="btn" disabled="@busy" @onclick="LimpiarFiltros">Limpiar</button>
        <button class="btn btn-primary" @onclick="Nueva">Nueva persona</button>
    </Actions>
</PageHeader>

        catch (Exception ex)
{
            if (!string.IsNullOrWhiteSpace(ex.Message) && TryApplyProblemDetails(ex.Message))
            {
                // handled by TryApplyProblemDetails
            }
            else
            {
                Toast.ShowError(ex.Message);
            }
}
else
{
    <table>
        <thead>
            <tr>
                <th>Legajo</th>
                <th>Nombre</th>
                <th>Doc</th>
                <th>Email</th>
                <th>Celular</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var p in lista)
        {
            <tr>
                <td>@p.IdPersona</td>
                <td>@p.Nombre @p.Apellido</td>
                <td>@p.TipoDocNombre @p.NumDoc</td>
                <td>@p.Correo</td>
                <td>@p.Celular</td>
                <td style="text-align:right">
                    <button class="btn" disabled="@busy" @onclick="() => Editar(p)">@(busy ? "…" : "Editar")</button>
                    <button class="btn" disabled="@busy" @onclick="() => Eliminar(p)">@(busy ? "…" : "Eliminar")</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <div style="display:flex; gap:.5rem; align-items:center; margin-top:.5rem;">
                catch (Exception ex)
        <span class="muted">Página @pageNumber</span>
                    if (!string.IsNullOrWhiteSpace(ex.Message) && TryApplyProblemDetails(ex.Message))
                    {
                        // handled
                    }
                    else
                    {
                        Toast.ShowError(ex.Message);
                    }
        <span class="muted">Total: @totalCount</span>
    </div>
}

@if (editando != null)
{
    <div class="panel" style="margin-top:1rem;">
        <div class="panel-header">@(editando.IdPersona == 0 ? "Nueva persona" : $"Editar: {editando.Nombre} {editando.Apellido}")</div>
        @if (submitted && errors.Count > 0)
        {
            <div class="error" style="margin:.5rem 0;">
                <strong>Corrigí los siguientes campos:</strong>
                <ul style="margin:.25rem 0 .25rem 1rem;">
                    @foreach (var kv in errors)
                    {
                        <li>@DisplayName(kv.Key): @kv.Value</li>
                    }
                </ul>
            </div>
        }
        <div style="display:grid; grid-template-columns: 160px 1fr; gap:.5rem; align-items:center;">
            <label>Nombre <span class="req">*</span></label>
            <input class=@($"input {(Invalid("Nombre") ? "invalid" : "")}") @bind="editando.Nombre" />
            @if (Invalid("Nombre")) { <span class="error-text">@GetError("Nombre")</span> }
            <label>Apellido <span class="req">*</span></label>
            <input class=@($"input {(Invalid("Apellido") ? "invalid" : "")}") @bind="editando.Apellido" />
            @if (Invalid("Apellido")) { <span class="error-text">@GetError("Apellido")</span> }
            <label>Tipo Doc <span class="req">*</span></label>
            <select class=@($"input {(Invalid("IdTipoDoc") ? "invalid" : "")}") @bind="selectedTipoDocId">
                <option value="0">Seleccione…</option>
                @foreach (var t in tiposDoc)
                {
                    <option value="@t.IdTipoDoc">@t.Nombre</option>
                }
            </select>
            @if (Invalid("IdTipoDoc")) { <span class="error-text">@GetError("IdTipoDoc")</span> }
            <label>Número Doc <span class="req">*</span></label>
            <input class=@($"input {(Invalid("NumDoc") ? "invalid" : "")}") @bind="editando.NumDoc" />
            @if (Invalid("NumDoc")) { <span class="error-text">@GetError("NumDoc")</span> }
            <label>CUIL</label>
            <input class=@($"input {(Invalid("Cuil") ? "invalid" : "")}") @bind="editando.Cuil" />
            @if (Invalid("Cuil")) { <span class="error-text">@GetError("Cuil")</span> }
            <label>Fecha Nacimiento</label>
            <InputDate class="input" @bind-Value="editando.FechaNacimiento" TValue="DateTime?" />
            <label>Email</label>
            <input class=@($"input {(Invalid("Correo") ? "invalid" : "")}") @bind="editando.Correo" />
            @if (Invalid("Correo")) { <span class="error-text">@GetError("Correo")</span> }
            <label>Celular</label>
            <input class=@($"input {(Invalid("Celular") ? "invalid" : "")}") @bind="editando.Celular" />
            @if (Invalid("Celular")) { <span class="error-text">@GetError("Celular")</span> }
            <label>Calle</label>
            <input class="input" @bind="editando.Calle" />
            <label>Altura</label>
            <input class="input" @bind="editando.Altura" />
            <label>Provincia <span class="req">*</span></label>
            <select class=@($"input {(Invalid("IdProvincia") ? "invalid" : "")}") @bind="selectedProvinciaId" @bind:after="ProvinciaChanged">
                <option value="0">Seleccione…</option>
                @foreach (var pr in provincias)
                {
                    <option value="@pr.IdProvincia">@pr.Nombre</option>
                }
            </select>
            @if (Invalid("IdProvincia")) { <span class="error-text">@GetError("IdProvincia")</span> }
            <label>Partido <span class="req">*</span></label>
            <select class=@($"input {(Invalid("IdPartido") ? "invalid" : "")}") @bind="selectedPartidoId" @bind:after="PartidoChanged">
                <option value="0">Seleccione…</option>
                @foreach (var pa in partidos)
                {
                    <option value="@pa.IdPartido">@pa.Nombre</option>
                }
            </select>
            @if (Invalid("IdPartido")) { <span class="error-text">@GetError("IdPartido")</span> }
            <label>Localidad <span class="req">*</span></label>
            <select class=@($"input {(Invalid("IdLocalidad") ? "invalid" : "")}") @bind="selectedLocalidadId">
                <option value="0">Seleccione…</option>
                @foreach (var lo in localidades)
                {
                    <option value="@lo.IdLocalidad">@lo.Nombre</option>
                }
            </select>
            @if (Invalid("IdLocalidad")) { <span class="error-text">@GetError("IdLocalidad")</span> }
            <label>Género <span class="req">*</span></label>
            <select class=@($"input {(Invalid("IdGenero") ? "invalid" : "")}") @bind="selectedGeneroId">
                <option value="0">Seleccione…</option>
                @foreach (var g in generos)
                {
                    <option value="@g.IdGenero">@g.Nombre</option>
                }
            </select>
            @if (Invalid("IdGenero")) { <span class="error-text">@GetError("IdGenero")</span> }
            <label>Fecha Ingreso</label>
            <InputDate class="input" @bind-Value="editando.FechaIngreso" TValue="DateTime?" />
        </div>
        <div style="display:flex; gap:.5rem; margin-top:.75rem;">
            <button class="btn btn-primary" disabled="@busy" @onclick="Guardar">@(busy ? "Guardando…" : "Guardar")</button>
            <button class="btn" disabled="@busy" @onclick="Cancelar">Cancelar</button>
        </div>
        @if (!string.IsNullOrWhiteSpace(info))
        {
            <div class="muted" style="margin-top:.5rem">@info</div>
        }
        @if (!string.IsNullOrWhiteSpace(error))
        {
            <div class="error" style="margin-top:.5rem">@error</div>
        }
    </div>
}

@code {
    private List<PersonaDto>? lista;
    private PersonaDto? editando;
    private int selectedTipoDocId;
    private List<TipoDocDto> tiposDoc = new();
    private List<ProvinciaDto> provincias = new();
    private List<PartidoDto> partidos = new();
    private List<LocalidadDto> localidades = new();
    private List<GeneroDto> generos = new();
    private int selectedProvinciaId;
    private int selectedPartidoId;
    private int selectedLocalidadId;
    private int selectedGeneroId;
    private string? error;
    private string? info;
    private bool busy;
    private int pageNumber = 1;
    private int pageSize = 10;
    private int totalCount;
    private string? nombreFilter;
    private string? docFilter;
    private int provinciaFilterId;
    private bool submitted;
    private Dictionary<string, string> errors = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarCatalogos();
        await CargarLista();
    }

    private async Task CargarCatalogos()
    {
        tiposDoc = await Api.GetAsync<List<TipoDocDto>>("api/v1/referencedata/tiposdoc");
        provincias = await Api.GetAsync<List<ProvinciaDto>>("api/v1/referencedata/provincias");
        generos = await Api.GetAsync<List<GeneroDto>>("api/v1/referencedata/generos");
    }

    private async Task CargarLista()
    {
        try
        {
            var qp = $"pageNumber={pageNumber}&pageSize={pageSize}";
            if (!string.IsNullOrWhiteSpace(nombreFilter)) qp += $"&nombre={Uri.EscapeDataString(nombreFilter)}";
            if (!string.IsNullOrWhiteSpace(docFilter)) qp += $"&numDoc={Uri.EscapeDataString(docFilter)}";
            if (provinciaFilterId > 0) qp += $"&idProvincia={provinciaFilterId}";
            var paged = await Api.GetAsync<PagedResponse<PersonaDto>>($"api/v1/personas?{qp}");
            lista = paged.Items?.ToList() ?? new();
            totalCount = paged.TotalCount;
            error = null;
        }
        catch (Exception ex)
        {
            // Show ProblemDetails if any; otherwise generic error
            if (!string.IsNullOrWhiteSpace(ex.Message) && TryApplyProblemDetails(ex.Message))
            {
                // handled
            }
            else
            {
                error = ex.Message;
                Toast.ShowError(error);
            }
        }
    }

    private void Nueva()
    {
        editando = new PersonaDto();
        selectedTipoDocId = 0;
        selectedProvinciaId = 0;
        selectedPartidoId = 0;
        selectedLocalidadId = 0;
        selectedGeneroId = 0;
        info = error = null;
        submitted = false;
        errors.Clear();
    }

    private void Editar(PersonaDto p)
    {
        editando = new PersonaDto
        {
            IdPersona = p.IdPersona,
            Nombre = p.Nombre,
            Apellido = p.Apellido,
            NumDoc = p.NumDoc,
            Correo = p.Correo,
            Celular = p.Celular,
            TipoDocNombre = p.TipoDocNombre
        };
        selectedTipoDocId = p.IdTipoDoc;
        selectedProvinciaId = p.IdProvincia;
        selectedPartidoId = p.IdPartido;
        selectedLocalidadId = p.IdLocalidad;
        selectedGeneroId = p.IdGenero;
        _ = LoadPartidosAndLocalidadesForEdit();
        info = error = null;
        submitted = false;
        errors.Clear();
    }

    private async Task LoadPartidosAndLocalidadesForEdit()
    {
        try
        {
            if (selectedProvinciaId > 0)
            {
                partidos = await Api.GetAsync<List<PartidoDto>>($"api/v1/referencedata/partidos/{selectedProvinciaId}");
            }
            if (selectedPartidoId > 0)
            {
                localidades = await Api.GetAsync<List<LocalidadDto>>($"api/v1/referencedata/localidades/{selectedPartidoId}");
            }
        }
        catch { /* ignore pre-load errors */ }
    }

    private async Task Guardar()
    {
        if (editando == null) return;
        try
        {
            busy = true;
            submitted = true;
            if (!ValidatePersona())
            {
                Toast.ShowError("Completa los campos obligatorios.");
                return;
            }
            if (editando.IdPersona == 0)
            {
                // Crear
                var req = new PersonaCreateRequest
                {
                    Nombre = editando.Nombre ?? string.Empty,
                    Apellido = editando.Apellido ?? string.Empty,
                    TipoDoc = (tiposDoc.FirstOrDefault(t => t.IdTipoDoc == selectedTipoDocId)?.Nombre) ?? string.Empty,
                    NumDoc = editando.NumDoc ?? string.Empty,
                    FechaNacimiento = editando.FechaNacimiento ?? DateTime.UtcNow.Date,
                    Cuil = editando.Cuil ?? string.Empty,
                    Calle = editando.Calle ?? string.Empty,
                    Altura = editando.Altura ?? string.Empty,
                    Localidad = (localidades.FirstOrDefault(l => l.IdLocalidad == selectedLocalidadId)?.Nombre) ?? string.Empty,
                    Genero = (generos.FirstOrDefault(g => g.IdGenero == selectedGeneroId)?.Nombre) ?? string.Empty,
                    Correo = editando.Correo ?? string.Empty,
                    Celular = editando.Celular ?? string.Empty,
                    FechaIngreso = editando.FechaIngreso ?? DateTime.UtcNow.Date
                };
                await Api.PostAsync("api/v1/personas", req);
                info = "Persona creada";
                Toast.ShowSuccess(info);
            }
            else
            {
                // Actualizar
                var req = new PersonaUpdateRequest
                {
                    Nombre = editando.Nombre,
                    Apellido = editando.Apellido,
                    IdTipoDoc = selectedTipoDocId != 0 ? selectedTipoDocId : editando.IdTipoDoc,
                    NumDoc = editando.NumDoc,
                    FechaNacimiento = editando.FechaNacimiento,
                    Cuil = editando.Cuil,
                    Calle = editando.Calle,
                    Altura = editando.Altura,
                    IdLocalidad = selectedLocalidadId != 0 ? selectedLocalidadId : editando.IdLocalidad,
                    IdPartido = selectedPartidoId != 0 ? selectedPartidoId : editando.IdPartido,
                    IdProvincia = selectedProvinciaId != 0 ? selectedProvinciaId : editando.IdProvincia,
                    IdGenero = selectedGeneroId != 0 ? selectedGeneroId : editando.IdGenero,
                    Correo = editando.Correo,
                    Celular = editando.Celular
                };
                await Api.PutAsync<PersonaDto>($"api/v1/personas/{editando.IdPersona}", req);
                info = "Cambios guardados";
                Toast.ShowSuccess(info);
            }
            editando = null;
            await CargarLista();
        }
        catch (Exception ex)
        {
            error = ex.Message;
            Toast.ShowError(error);
        }
        finally { busy = false; }
    }

    private void Cancelar() { editando = null; }

    private async Task NextPage() { pageNumber++; await CargarLista(); }
    private async Task PrevPage() { if (pageNumber>1) { pageNumber--; await CargarLista(); } }
    private async Task Buscar() { pageNumber = 1; await CargarLista(); }
    private async Task LimpiarFiltros() { nombreFilter = docFilter = null; provinciaFilterId = 0; pageNumber = 1; await CargarLista(); }

    private async Task Eliminar(PersonaDto p)
    {
        try
        {
            if (!await Confirm($"¿Eliminar a {p.Nombre} {p.Apellido}?")) return;
            busy = true;
            await Api.DeleteAsync($"api/v1/personas/{p.IdPersona}");
            Toast.ShowSuccess("Persona eliminada");
            await CargarLista();
        }
        catch (Exception ex)
        {
            error = ex.Message;
            Toast.ShowError(error);
        }
        finally { busy = false; }
    }

    private async Task<bool> Confirm(string message)
    {
        // Use browser confirm for simplicity and wide compatibility
        return await JS.InvokeAsync<bool>("confirm", message);
    }

    // Local DTOs for create/update payloads (simplified mapping)
    class PersonaCreateRequest
    {
        public string Legajo { get; set; } = ""; // opcional para este formulario básico
        public string Nombre { get; set; } = "";
        public string Apellido { get; set; } = "";
        public string TipoDoc { get; set; } = "";
        public string NumDoc { get; set; } = "";
        public DateTime FechaNacimiento { get; set; } = DateTime.UtcNow.Date;
        public string Celular { get; set; } = "";
        public string Cuil { get; set; } = "";
        public string Calle { get; set; } = "";
        public string Altura { get; set; } = "";
        public string Localidad { get; set; } = "";
        public string Genero { get; set; } = "";
        public string Correo { get; set; } = "";
        public DateTime FechaIngreso { get; set; } = DateTime.UtcNow.Date;
    }

    class PersonaUpdateRequest
    {
        public string? Nombre { get; set; }
        public string? Apellido { get; set; }
        public int IdTipoDoc { get; set; } = 0;
        public string? NumDoc { get; set; }
        public DateTime? FechaNacimiento { get; set; }
        public string? Cuil { get; set; }
        public string? Calle { get; set; }
        public string? Altura { get; set; }
        public int IdLocalidad { get; set; } = 0;
        public int IdPartido { get; set; } = 0;
        public int IdProvincia { get; set; } = 0;
        public int IdGenero { get; set; } = 0;
        public string? Correo { get; set; }
        public string? Celular { get; set; }
    }

    private async Task ProvinciaChanged()
    {
        selectedPartidoId = 0;
        selectedLocalidadId = 0;
        partidos = selectedProvinciaId > 0 ? await Api.GetAsync<List<PartidoDto>>($"api/v1/referencedata/partidos/{selectedProvinciaId}") : new();
        localidades = new();
    }

    private async Task PartidoChanged()
    {
        selectedLocalidadId = 0;
        localidades = selectedPartidoId > 0 ? await Api.GetAsync<List<LocalidadDto>>($"api/v1/referencedata/localidades/{selectedPartidoId}") : new();
    }

    private bool ValidatePersona()
    {
        errors.Clear();
        if (editando is null) return false;
        if (string.IsNullOrWhiteSpace(editando.Nombre)) errors[nameof(editando.Nombre)] = "Requerido";
        if (string.IsNullOrWhiteSpace(editando.Apellido)) errors[nameof(editando.Apellido)] = "Requerido";
        if (string.IsNullOrWhiteSpace(editando.NumDoc)) errors[nameof(editando.NumDoc)] = "Requerido";
        else
        {
            if (editando.NumDoc.Length > 20) errors[nameof(editando.NumDoc)] = "Máximo 20 caracteres";
            if (editando.NumDoc.Any(ch => !char.IsDigit(ch))) errors[nameof(editando.NumDoc)] = "Solo números";
        }

        var idTipoDoc = selectedTipoDocId != 0 ? selectedTipoDocId : editando.IdTipoDoc;
        if (idTipoDoc == 0) errors["IdTipoDoc"] = "Seleccione un tipo de documento";
        var idProv = selectedProvinciaId != 0 ? selectedProvinciaId : editando.IdProvincia;
        if (idProv == 0) errors["IdProvincia"] = "Seleccione una provincia";
        var idPart = selectedPartidoId != 0 ? selectedPartidoId : editando.IdPartido;
        if (idPart == 0) errors["IdPartido"] = "Seleccione un partido";
        var idLoc = selectedLocalidadId != 0 ? selectedLocalidadId : editando.IdLocalidad;
        if (idLoc == 0) errors["IdLocalidad"] = "Seleccione una localidad";
        var idGen = selectedGeneroId != 0 ? selectedGeneroId : editando.IdGenero;
        if (idGen == 0) errors["IdGenero"] = "Seleccione un género";

        // CUIL: opcional, pero si viene, 11 dígitos
        if (!string.IsNullOrWhiteSpace(editando.Cuil))
        {
            var digits = new string(editando.Cuil.Where(char.IsDigit).ToArray());
            if (digits.Length != 11) errors[nameof(editando.Cuil)] = "CUIL inválido (11 dígitos)";
        }
        // Email básico (opcional)
        if (!string.IsNullOrWhiteSpace(editando.Correo))
        {
            if (!editando.Correo.Contains('@') || !editando.Correo.Contains('.')) errors[nameof(editando.Correo)] = "Email inválido";
        }
        // Celular: opcional, máximo 20 y sin letras
        if (!string.IsNullOrWhiteSpace(editando.Celular))
        {
            if (editando.Celular.Length > 20) errors[nameof(editando.Celular)] = "Máximo 20 caracteres";
            if (editando.Celular.Any(char.IsLetter)) errors[nameof(editando.Celular)] = "No usar letras";
        }

        StateHasChanged();
        return errors.Count == 0;
    }

    private bool Invalid(string key) => submitted && errors.ContainsKey(key);
    private string GetError(string key) => errors.TryGetValue(key, out var v) ? v : "Requerido";
    private bool TryApplyProblemDetails(string content)
    {
        try
        {
            var problem = System.Text.Json.JsonSerializer.Deserialize<ProblemDetailsPayload>(content, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if (problem?.Errors != null && problem.Errors.Count > 0)
            {
                errors.Clear();
                foreach (var kv in problem.Errors)
                {
                    if (kv.Value?.Length > 0) errors[kv.Key] = string.Join(" ", kv.Value);
                }
                submitted = true; StateHasChanged();
                Toast.ShowError(problem.Title ?? "Error de validación");
                return true;
            }
            if (!string.IsNullOrWhiteSpace(problem?.Detail)) { Toast.ShowError(problem.Detail!); return true; }
        }
        catch { /* not a problem details payload */ }
        return false;
    }
    class ProblemDetailsPayload { public string? Title { get; set; } public string? Detail { get; set; } public Dictionary<string, string[]>? Errors { get; set; } }
    private string DisplayName(string key) => key switch
    {
        "Nombre" => "Nombre",
        "Apellido" => "Apellido",
        "NumDoc" => "Número Doc",
        "IdTipoDoc" => "Tipo Doc",
        "IdProvincia" => "Provincia",
        "IdPartido" => "Partido",
        "IdLocalidad" => "Localidad",
        "IdGenero" => "Género",
        "Cuil" => "CUIL",
        "Correo" => "Email",
        "Celular" => "Celular",
        _ => key
    };
}
