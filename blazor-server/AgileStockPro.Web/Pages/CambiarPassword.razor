@page "/change-password"
@inject AgileStockPro.Web.Services.IAuthService Auth
@inject AgileStockPro.Web.Services.IUserStore Store
@inject IToastService Toast
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using AgileStockPro.Web.Components.Shared

<PageHeader Title="Cambiar contraseña" />

<EditForm Model="model" OnValidSubmit="DoChange" OnInvalidSubmit="OnInvalidChange">
    <DataAnnotationsValidator />
    <div class="panel animate__animated animate__fadeIn">
        <div class="panel-header">Actualizar contraseña</div>
        <div class="form-group mb-3">
            <label for="actual" class="form-label">Contraseña actual</label>
            <InputText id="actual" type="password" class="form-control" @bind-Value="model.Current" />
            <ValidationMessage For="() => model.Current" />
        </div>
        <div class="form-group mb-3">
            <label for="nueva" class="form-label">Nueva contraseña</label>
            <InputText id="nueva" type="password" class="form-control" @bind-Value="model.New" @oninput="@(e => OnNewChanged(e?.Value?.ToString()))" />
            <ValidationMessage For="() => model.New" />
            <ul class="muted mt-2" style="padding-left:1.1rem;">
                <li style="color:@(lenOk?"#198754":"#dc3545")">Mínimo @policy.MinLength caracteres</li>
                @if (policy.RequireUpperLower)
                {
                    <li style="color:@(upperLowerOk?"#198754":"#dc3545")">Debe contener mayúscula y minúscula</li>
                }
                @if (policy.RequireNumber)
                {
                    <li style="color:@(numberOk?"#198754":"#dc3545")">Debe contener un número</li>
                }
                @if (policy.RequireSpecial)
                {
                    <li style="color:@(specialOk?"#198754":"#dc3545")">Debe contener un caracter especial</li>
                }
            </ul>
        </div>
        <div class="d-flex justify-content-end">
            <button class="btn btn-primary px-4" disabled="@busy || !isValid">
                @(busy ? (MarkupString)"<span class='spinner-border spinner-border-sm me-2' role='status' aria-hidden='true'></span> Guardando..." : (MarkupString)"Guardar")
            </button>
        </div>
    </div>
</EditForm>

@code {
    class Model { 
        [Required(ErrorMessage = "Ingresá tu contraseña actual")]
        public string Current { get; set; } = string.Empty; 
        [Required(ErrorMessage = "Ingresá la nueva contraseña")]
        public string New { get; set; } = string.Empty; 
    }
    Model model = new();
    [Inject] NavigationManager Nav { get; set; } = default!;
    string? msg; bool busy; bool isValid; AgileStockPro.Web.Models.SecurityPolicy policy = new();
    bool lenOk, upperLowerOk, numberOk, specialOk;
    protected override async Task OnInitializedAsync()
    {
        policy = await Store.GetPolicyAsync();
        Validate(model.New);
    }
    void OnNewChanged(string? v){ model.New = v ?? string.Empty; Validate(model.New); }
    void Validate(string? value)
    {
        var v = value ?? string.Empty;
        lenOk = v.Length >= policy.MinLength;
        upperLowerOk = (v.Any(char.IsUpper) && v.Any(char.IsLower));
        numberOk = v.Any(char.IsDigit);
        specialOk = v.Any(ch => !char.IsLetterOrDigit(ch));
        isValid = lenOk
            && (!policy.RequireUpperLower || upperLowerOk)
            && (!policy.RequireNumber || numberOk)
            && (!policy.RequireSpecial || specialOk);
        StateHasChanged();
    }
    private async Task DoChange()
    {
        busy = true; msg = null;
        Toast.ShowInfo("Intentando cambiar la contraseña...");
        var result = await Auth.ChangePasswordAsync(model.Current, model.New);
        if (result.Success)
        {
            var updatedUser = await Auth.GetCurrentUserAsync();
            if (updatedUser != null)
            {
                await Store.SetCurrentUserAsync(updatedUser);
            }
            msg = "Contraseña actualizada";
            Toast.ShowSuccess(msg);
            await Task.Delay(600);
            Nav.NavigateTo("/dashboard", true);
        }
        else
        {
            msg = result.ErrorMessage ?? "No se pudo actualizar (verifique la actual o la política)";
            Toast.ShowError(msg);
            // Redirige igual para probar el flujo
            await Task.Delay(600);
            Nav.NavigateTo("/dashboard", true);
        }
        busy = false;
    }

    private void OnInvalidChange()
    {
        msg = "Completá los campos requeridos";
        Toast.ShowError(msg);
    }
}
