@page "/change-password"
@inject AgileStockPro.Web.Services.IAuthService Auth
@inject AgileStockPro.Web.Services.IUserStore Store
@inject IToastService Toast
@using System.ComponentModel.DataAnnotations

<PageHeader Title="Cambiar contraseña" />

<EditForm Model="model" OnValidSubmit="DoChange" OnInvalidSubmit="OnInvalidChange">
    <DataAnnotationsValidator />
    <div class="panel">
        <div class="panel-header">Actualizar</div>
        <div style="display:grid; grid-template-columns: 160px 1fr; gap:.5rem; align-items:center;">
            <label>Actual</label>
            <InputText type="password" class="input" @bind-Value="model.Current" />
            <div></div>
            <ValidationMessage For="() => model.Current" />
            <label>Nueva</label>
            <InputText type="password" class="input" @bind-Value="model.New" @oninput="@(e => OnNewChanged(e?.Value?.ToString()))" />
            <div></div>
            <ValidationMessage For="() => model.New" />
            <div></div>
            <ul class="muted" style="margin:0; padding-left:1.1rem;">
                <li style="color:@(lenOk?"#198754":"#dc3545")">Mínimo @policy.MinLength caracteres</li>
                @if (policy.RequireUpperLower)
                {
                    <li style="color:@(upperLowerOk?"#198754":"#dc3545")">Debe contener mayúscula y minúscula</li>
                }
                @if (policy.RequireNumber)
                {
                    <li style="color:@(numberOk?"#198754":"#dc3545")">Debe contener un número</li>
                }
                @if (policy.RequireSpecial)
                {
                    <li style="color:@(specialOk?"#198754":"#dc3545")">Debe contener un caracter especial</li>
                }
            </ul>
        </div>
        <div style="margin-top:1rem; display:flex; gap:.5rem">
            <button class="btn btn-primary" disabled="@busy || !isValid">Guardar</button>
        </div>
        @if (!string.IsNullOrWhiteSpace(msg))
        {
            <div style="margin-top:.5rem">@msg</div>
        }
    </div>
</EditForm>

@code {
    class Model { 
        [Required(ErrorMessage = "Ingresá tu contraseña actual")]
        public string Current { get; set; } = string.Empty; 
        [Required(ErrorMessage = "Ingresá la nueva contraseña")]
        public string New { get; set; } = string.Empty; 
    }
    Model model = new();
    [Inject] NavigationManager Nav { get; set; } = default!;
    string? msg; bool busy; bool isValid; AgileStockPro.Web.Models.SecurityPolicy policy = new();
    bool lenOk, upperLowerOk, numberOk, specialOk;
    protected override async Task OnInitializedAsync()
    {
        policy = await Store.GetPolicyAsync();
        Validate(model.New);
    }
    void OnNewChanged(string? v){ model.New = v ?? string.Empty; Validate(model.New); }
    void Validate(string? value)
    {
        var v = value ?? string.Empty;
        lenOk = v.Length >= policy.MinLength;
        upperLowerOk = (v.Any(char.IsUpper) && v.Any(char.IsLower));
        numberOk = v.Any(char.IsDigit);
        specialOk = v.Any(ch => !char.IsLetterOrDigit(ch));
        isValid = lenOk
            && (!policy.RequireUpperLower || upperLowerOk)
            && (!policy.RequireNumber || numberOk)
            && (!policy.RequireSpecial || specialOk);
        StateHasChanged();
    }
    private async Task DoChange()
    {
        busy = true; msg = null;
        var ok = await Auth.ChangePasswordAsync(model.Current, model.New);
        if (ok)
        {
            msg = "Contraseña actualizada";
            Toast.ShowSuccess(msg);
            await Task.Delay(600);
            Nav.NavigateTo("/dashboard", true);
        }
        else
        {
            msg = "No se pudo actualizar (verifique la actual o la política)";
            Toast.ShowError(msg);
        }
        busy = false;
    }

    private void OnInvalidChange()
    {
        msg = "Completá los campos requeridos";
        Toast.ShowError(msg);
    }
}
